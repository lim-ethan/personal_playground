# version: '3.9'

networks:
  druid_net:
    driver: bridge
services:
  # PostgreSQL for Druid metadata
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: druid
      POSTGRES_PASSWORD: password
      POSTGRES_DB: druid
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
    networks:
      - druid_net

  # Zookeeper for Kafka (Confluent)
  zookeeper_kafka:
    container_name: zookeeper_kafka
    image: confluentinc/cp-zookeeper:7.6.1
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"  # 호스트에서 접근할 때는 localhost:2182 -> 컨테이너 내부 2181
    networks:
      - druid_net
  # Kafka
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.6.1
    restart: unless-stopped
    depends_on:
      - zookeeper_kafka
    environment:
      KAFKA_BROKER_ID: 1
      # 컨테이너 내부에서 zookeeper_kafka:2181 로 연결 (항상 내부 포트 사용)
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_kafka:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      # 리스너 설정: 내부(컨테이너)용과 외부(호스트)용을 분리
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # (선택) 추가 튜닝 변수 필요 시 여기에 추가
    ports:
      - "9092:9092"  # 다른 컨테이너(예: Druid) 및 컨테이너 네트워크 접근용
      - "9093:9093"  # 호스트(로컬)에서 접근 테스트용 (producer/consumer용)
    networks:
      - druid_net

  # Druid Coordinator
  coordinator:
    container_name: coordinator
    image: apache/druid:28.0.0
    restart: unless-stopped
    command: coordinator
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    env_file:
      - environment
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    networks:
      - druid_net

  # Druid Broker
  broker:
    container_name: broker
    image: apache/druid:28.0.0
    restart: unless-stopped
    command: broker
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    env_file:
      - environment
    volumes:
      - broker_var:/opt/druid/var
    networks:
      - druid_net

  # Druid Historical
  historical:
    container_name: historical
    image: apache/druid:28.0.0
    restart: unless-stopped
    command: historical
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    env_file:
      - environment
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
      - ./data:/opt/shared/data:rw
    networks:
      - druid_net

  # Druid MiddleManager
  middlemanager:
    container_name: middlemanager
    image: apache/druid:28.0.0
    restart: unless-stopped
    command: middleManager
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    env_file:
      - environment
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    networks:
      - druid_net

  # Druid Router
  router:
    container_name: router
    image: apache/druid:28.0.0
    restart: unless-stopped
    command: router
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    env_file:
      - environment
    volumes:
      - router_var:/opt/druid/var
    networks:
      - druid_net

  # Zookeeper for Druid (separate)
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5
    restart: unless-stopped
    ports:
      - "2181:2181"
    networks:
      - druid_net
  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    # image: apache/superset:latest
    container_name: superset
    restart: unless-stopped
    ports:
      - "8088:8088"
    volumes:
      - superset_home:/app/superset_home
    environment:
      - SUPERSET_SECRET_KEY=your_secret_key_here
      - SQLALCHEMY_DATABASE_URI=sqlite:////app/superset_home/superset.db
      - PIP_ADDITIONAL_REQUIREMENTS=flask-cors pydruid sqlalchemy-druid
    depends_on:
      - postgres
      - broker
      - coordinator
      - router
    networks:
      - druid_net

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  zookeeper_data: {}
  kafka_data: {}
  superset_home: {}
